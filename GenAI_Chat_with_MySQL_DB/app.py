from dotenv import load_dotenv
import streamlit as st
from langchain_community.utilities import SQLDatabase
import urllib
import os
from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_google_genai import GoogleGenerativeAI
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser

load_dotenv()

# Load the database environmental values
api_key = os.environ['GOOGLE_API_KEY']
db_user = os.environ["db_user"]
db_password = os.environ["db_password"]
db_host = os.environ["db_host"]
db_name = os.environ["db_name"]
db_port = os.environ["db_port"]


# Function to connect to MySQL Database
def init_database(user: str, password: str, host: str, port: str, database: str) -> SQLDatabase:
    password_upd = urllib.parse.quote_plus(password)  # Encode the password as it has special character '@' else it will fail.
    db_uri = f"mysql+mysqlconnector://{user}:{password_upd}@{host}:{port}/{database}"
    return SQLDatabase.from_uri(db_uri)


if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
        AIMessage(content="Hello! I'm a SQL assistant. Ask me anything about your database."),
    ]


def get_sql_chain(db):
    template = """
    You are a data analyst at a company. You are interacting with a user who is asking you questions about the company's database.
    Based on the table schema below, write a SQL query that would answer the user's question. Never query for all columns from a table. 
    The price is denoting INR not US dollar. 
    You must query only the columns that are needed to answer the question. Take the conversation history into account.

    <SCHEMA>{schema}</SCHEMA>

    Conversation History: {chat_history}

    Write only the SQL query and nothing else. Do not wrap the SQL query in any other text, not even backticks.

    For example:
    Question: What are the pizza's available?
    SQL Query:  SELECT distinct pizza_name from Pizza;
    Question: Any discount available on medium size pizza?
    SQL Query: SELECT p.pizza_name, d.pct_discount FROM pizza AS p JOIN discounts AS d ON p.pizza_id = d.pizza_id WHERE p.size = 'M';
    Question: What is the menu?
    SQL Query:  SELECT distinct pizza_name,pizza_category,size,price from Pizza;
    Question: Can you share the discounts for the day?
    SQL Query: SELECT pizza_name, size, pct_discount FROM pizza AS p JOIN discounts AS d ON p.pizza_id = d.pizza_id;
    Question:  What is the revenue generated by farmhouse pizza with discounts?
    SQL Query: SELECT sum(p.price * p.stock_sold * (1 - coalesce(d.pct_discount,0)/100)) AS revenue FROM pizza AS p left JOIN discounts AS d ON p.pizza_id = d.pizza_id WHERE p.pizza_name = 'Farmhouse';
    
    Your turn:

    Question: {question}
    SQL Query:
    """
    prompt = ChatPromptTemplate.from_template(template)

    llm = GoogleGenerativeAI(model="models/gemini-1.0-pro", google_api_key=api_key, temperature=0.1)

    def get_schema(_):
        return db.get_table_info()

    return (
            RunnablePassthrough.assign(schema=get_schema)
            | prompt
            | llm
            | StrOutputParser()
    )


def get_response(user_query: str, db: SQLDatabase, chat_history: list):
    sql_chain = get_sql_chain(db)

    template = """
    You are a data analyst at a company. You are interacting with a user who is asking you questions about the company's database.
    Based on the table schema below, question, sql query, and sql response, write a natural language response.
    <SCHEMA>{schema}</SCHEMA>

    Conversation History: {chat_history}
    SQL Query: <SQL>{query}</SQL>
    User question: {question}
    SQL Response: {response}"""

    prompt = ChatPromptTemplate.from_template(template)

    llm = GoogleGenerativeAI(model="models/gemini-1.0-pro", google_api_key=api_key, temperature=0.1)

    chain = (
            RunnablePassthrough.assign(query=sql_chain).assign(
                schema=lambda _: db.get_table_info(),
                response=lambda vars: db.run(vars["query"]),
            )
            | prompt
            | llm
            | StrOutputParser()
    )

    return chain.invoke({
        "question": user_query,
        "chat_history": chat_history,
    })


# uri = init_database(db_user,db_password,db_host,db_port,db_name)
# print(uri.table_info)

# Streamlit Dashboard creation
st.set_page_config(page_title="Chat with MySQL")
st.title("Chat with MySQL Database")

with st.sidebar:
    st.subheader("Settings")
    st.write("This is a simple chat application using MySQL. Connect to the database and start chatting.")

    st.text_input("Host", value=db_host, key="Host")
    st.text_input("Port", value=db_port, key="Port")
    st.text_input("User", value=db_user, key="User")
    st.text_input("Password", type="password", value=db_password, key="Password")
    st.text_input("Database", value=db_name, key="Database")

    if st.button("Connect"):
        with st.spinner("Connecting to database..."):
            db = init_database(
                st.session_state["User"],
                st.session_state["Password"],
                st.session_state["Host"],
                st.session_state["Port"],
                st.session_state["Database"]
            )
            st.session_state.db = db
            st.success("Connected to database!")

for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI"):
            st.markdown(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human"):
            st.markdown(message.content)

user_query = st.chat_input("Type a message...")

if user_query is not None and user_query.strip() != "":
    st.session_state.chat_history.append(HumanMessage(content=user_query))

    with st.chat_message("Human"):
        st.markdown(user_query)

    with st.chat_message("AI"):
        # sql_chain = get_sql_chain(st.session_state.db)
        # response = sql_chain.invoke({
        #     "chat_history": st.session_state.chat_history,
        #     "question": user_query
        # })
        response = get_response(user_query, st.session_state.db, st.session_state.chat_history)
        st.markdown(response)

    st.session_state.chat_history.append(AIMessage(content=response))
